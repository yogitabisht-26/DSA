import java.util.*;
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<>();
        if(s==  null || words == null || words.length ==  0 ) return result;
        int wordLen = words[0].length();
        int totalLen = wordLen*words.length;
        int sLen = s.length();
        if(sLen < totalLen)return result ;
        Map<String,Integer> wordCount = new HashMap<>();
        for(String word:words){
            wordCount.put(word,wordCount.getOrDefault(word,0)+1);
        }
        for(int i = 0 ; i<wordLen ;i++){
            int left=i , right = i ;
            Map<String,Integer> seen = new HashMap<>();
            int count = 0;
            while(right + wordLen <= sLen ){
                String word = s.substring(right,right+wordLen);
                right+=wordLen;
                if(wordCount.containsKey(word)){
                    seen.put(word,seen.getOrDefault(word,0)+1);
                    count++;
                    while(seen.get(word)>wordCount.get(word)){
                        String leftWord = s.substring(left, left+wordLen);
                        seen.put(leftWord,seen.get(leftWord)-1);
                        left+=wordLen ;
                        count--;
                    }
                    if(count == words.length){
                        result.add(left);
                    }
                }
                else{
                    seen.clear();
                    count = 0 ;
                    left=right;
                }
            }
        }
        return result;
    }
}
